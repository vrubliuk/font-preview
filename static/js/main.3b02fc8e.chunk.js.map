{"version":3,"sources":["axios.js","components/Spinner/Spinner.jsx","serviceWorker.js","index.js","App.jsx","api.js"],"names":["axios","create","baseURL","className","Boolean","window","location","hostname","match","ReactDOM","render","useState","fonts","setFonts","fontSize","setFontSize","fontId","setFontId","text","setText","isDownloading","setIsDownloading","fetchImage","a","method","url","responseType","params","handwritingStyleId","data","jsFileDownload","alert","message","useEffect","get","type","value","onChange","e","target","map","font","i","id","key","label","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAIeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAHsD,kDCCzC,G,MAAA,kBACb,yBAAKC,UAAU,WACb,yBAAKA,UAAU,cCOCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCAD,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEaF,mBAAS,MAFtB,mBAEZG,EAFY,KAEFC,EAFE,OAGSJ,mBAAS,GAHlB,mBAGZK,EAHY,KAGJC,EAHI,OAIKN,mBAAS,2EAJd,mBAIZO,EAJY,KAINC,EAJM,OAOuBR,oBAAS,GAPhC,mBAOZS,EAPY,KAOGC,EAPH,KASbC,EAAU,uCAAG,8BAAAC,EAAA,6DACjBF,GAAiB,GADA,kBCVnBrB,EAAM,CACJwB,OAAQ,MACRC,IAAK,SACLC,aAAc,OACdC,ODSkC,CAC9Bb,WACAc,mBAAoBZ,EACpBE,UANa,gBAGPW,EAHO,EAGPA,KAKRC,IAAeD,EAAM,eARN,gDAUfE,MAAM,KAAIC,SAVK,QAYjBX,GAAiB,GAZA,yDAAH,qDA0BhB,OAXAY,qBAAU,WACR,sBAAC,8BAAAV,EAAA,+EC7ByBvB,EAAMkC,IAAI,SD6BnC,gBAEWL,EAFX,EAEWA,KACRhB,EAASgB,EAAKjB,OAHjB,gDAKGmB,MAAM,EAAD,IALR,wDAAD,KAQC,IAGD,yBAAK5B,UAAU,OACb,yBAAKA,UAAU,QACb,4CACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SAAf,aACA,2BACEA,UAAU,QACVgC,KAAK,OACLC,MAAOtB,EACPuB,SAAU,SAAAC,GAAC,OAAIvB,EAAYuB,EAAEC,OAAOH,WAGxC,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,SAAf,eACA,4BACEA,UAAU,SACViC,MAAOpB,EACPqB,SAAU,SAAAC,GAAC,OAAIrB,EAAUqB,EAAEC,OAAOH,SAEjCxB,EAAM4B,KAAI,SAACC,EAAMC,GAAP,OACT,4BAAQN,MAAOK,EAAKE,GAAIC,IAAKF,GAC1BD,EAAKI,YAKd,yBAAK1C,UAAU,OACb,yBAAKA,UAAU,SAAf,QACA,8BACEA,UAAU,WACViC,MAAOlB,EACPmB,SAAU,SAAAC,GAAC,OAAInB,EAAQmB,EAAEC,OAAOH,WAGpC,yBAAKjC,UAAU,kBACZiB,EACC,kBAAC,EAAD,MAEA,4BAAQjB,UAAU,SAASgC,KAAK,SAASW,QAASxB,GAAlD,uBD1EI,MAASyB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3b02fc8e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseURL = process.env.NODE_ENV === \"production\" ? \"https://font-glyphs-preview.herokuapp.com/api\" : \"http://localhost:8080/api\";\r\n\r\nexport default axios.create({\r\n  baseURL\r\n});","import React from \"react\";\r\nimport \"./Spinner.scss\";\r\n\r\nexport default () => (\r\n  <div className=\"spinner\">\r\n    <div className=\"circle\"></div>\r\n  </div>\r\n);\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport jsFileDownload from \"js-file-download\";\nimport { getFonts, getImage } from \"./api\";\nimport Spinner from \"./components/Spinner/Spinner.jsx\";\n\nexport default () => {\n  const [fonts, setFonts] = useState([]);\n  const [fontSize, setFontSize] = useState(\"50\");\n  const [fontId, setFontId] = useState(1);\n  const [text, setText] = useState(`The first line of text\nThe second line of text\nThe third line of text`);\n  const [isDownloading, setIsDownloading] = useState(false);\n\n  const fetchImage = async () => {\n    setIsDownloading(true);\n    try {\n      const { data } = await getImage({\n        fontSize,\n        handwritingStyleId: fontId,\n        text\n      });\n      jsFileDownload(data, \"preview.png\");\n    } catch (err) {\n      alert(err.message);\n    }\n    setIsDownloading(false);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { data } = await getFonts();\n        setFonts(data.fonts);\n      } catch (err) {\n        alert(err);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"form\">\n        <h1>Font Preview</h1>\n        <div className=\"row\">\n          <div className=\"label\">Font Size</div>\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={fontSize}\n            onChange={e => setFontSize(e.target.value)}\n          />\n        </div>\n        <div className=\"row\">\n          <div className=\"label\">Font Family</div>\n          <select\n            className=\"select\"\n            value={fontId}\n            onChange={e => setFontId(e.target.value)}\n          >\n            {fonts.map((font, i) => (\n              <option value={font.id} key={i}>\n                {font.label}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"row\">\n          <div className=\"label\">Text</div>\n          <textarea\n            className=\"textarea\"\n            value={text}\n            onChange={e => setText(e.target.value)}\n          ></textarea>\n        </div>\n        <div className=\"row row-button\">\n          {isDownloading ? (\n            <Spinner />\n          ) : (\n            <button className=\"button\" type=\"button\" onClick={fetchImage}>\n              Download Image\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import axios from \"./axios\";\r\n\r\nexport const getFonts = () => axios.get(\"fonts\");\r\n\r\nexport const getImage = payload =>\r\n  axios({\r\n    method: \"get\",\r\n    url: \"images\",\r\n    responseType: \"blob\",\r\n    params: payload\r\n  });\r\n"],"sourceRoot":""}